{"version":3,"sources":["AxisTop.js","RacingAxisTop.js","Bar.js","RacingBarGroup.js","util/dataCountry.js","RacingBarChart.js","useKeyframes.js","App.js","useWindowSize.js","serviceWorker.js","index.js"],"names":["AxisTop","props","domainMax","xMax","numTicks","Math","floor","xScaleForAxis","scaleLinear","domain","range","React","createElement","VxAxisTop","top","left","scale","tickLabelProps","textAnchor","dy","fontSize","AnimatedAxisTop","animated","RacingAxisTop","forwardRef","_ref","ref","prevDomainMax","useRef","current","springProps","useSpring","from","to","Object","assign","Bar","color","x","y","width","height","name","value","text","concat","toString","replace","numberWithCommas","customColor","Fragment","VxBar","fill","style","opacity","VxText","AnimatedBar","RacingBarGroup","frameData","xScale","yScale","colorScale","useTransition","map","_ref2","idx","d","initial","leave","enter","update","unique","_ref3","item","bandwidth","interpolate","v","toFixed","key","dataContinent","id","active","RacingBarChart","numOfBars","margin","keyframes","onStart","onStop","frameIdx","animationKey","playing","setAnimation","useState","dataRegion","setDataRegio","regionContinent","setRegionContinent","updateFrameRef","useEffect","date","currentDate","data","frame","slice","setTimeout","prevFrameIdx","others","isLastFrame","length","barGroupRef","axisRef","useImperativeHandle","replay","clearTimeout","start","animation","stop","prevPlayingRef","useLayoutEffect","sumTotalValues","reduce","a","b","values","_ref4","right","yMax","bottom","max","useMemo","scaleBand","Array","_","nameList","scaleOrdinal","schemeTableau10","dateInYear","getFullYear","console","log","Stack","direction","spacing","marginBottom","marginTop","FormControlLabel","label","control","Checkbox","checked","onChange","event","handleChangeCheckbox","target","filter","sx","border","Group","elem","find","_ref5","category","x1","y1","x2","y2","stroke","defaultProps","makeKeyframes","numOfSlice","findData","dataByDateAndName","Map","forEach","dataPoint","get","nextGroup","set","e","buildFindData","Set","frames","sort","result","prev","next","prevTimestamp","Date","getTime","diff","i","sliceDate","sliceData","prevValue","nextDataPoint","push","useKeyframes","dataUrl","setKeyframes","axios","then","resp","csvString","nextData","csvParse","_ref6","Number","chartMargin","App","windowWidth","getSize","window","innerWidth","innerHeight","windowSize","setWindowSize","onResize","addEventListener","removeEventListener","useWindowSize","chartWidth","chartRef","forceUpdate","paddingTop","Button","variant","onClick","handleReplay","endIcon","ReplayCircleFilledIcon","handleStop","handleStart","PlayCircleFilledIcon","StopCircleIcon","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1c4bb09.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { scaleLinear } from \"@vx/scale\";\nimport { AxisTop as VxAxisTop } from \"@vx/axis\";\n\nconst AxisTop = (props) => {\n  const { domainMax, xMax } = props;\n  const numTicks = xMax > 500 ? 5 : Math.floor(xMax / 100);\n  const xScaleForAxis = scaleLinear({\n    domain: [0, domainMax],\n    range: [0, xMax]\n  });\n  return <VxAxisTop\n    top={0}\n    left={0}\n    scale={xScaleForAxis}\n    tickLabelProps={() => ({ textAnchor: 'middle', dy: '-0.25em', fontSize: 12, })}\n    numTicks={numTicks}\n  />\n}\n\nAxisTop.propTypes = {\n  domainMax: PropTypes.number.isRequired,\n  xMax: PropTypes.number.isRequired,\n};\n\nexport default AxisTop;","import React, { forwardRef, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSpring, animated } from \"react-spring\";\nimport AxisTop from \"./AxisTop\";\n\nconst AnimatedAxisTop = animated(AxisTop);\n\nconst RacingAxisTop = forwardRef(({ domainMax, xMax }, ref) => {\n  const prevDomainMaxRef = useRef(domainMax);\n  const prevDomainMax = prevDomainMaxRef.current;\n  const springProps = useSpring({\n    from: { domainMax: prevDomainMax },\n    to: { domainMax },\n    ref\n  });\n  return (\n    <AnimatedAxisTop\n      xMax={xMax}\n      {...springProps}\n    />\n  );\n});\n\nRacingAxisTop.propTypes = {\n  domainMax: PropTypes.number.isRequired,\n  xMax: PropTypes.number.isRequired,\n};\n\nexport default RacingAxisTop;","import React, { useEffect } from \"react\";\nimport { Bar as VxBar } from \"@vx/shape\";\nimport { Text as VxText } from \"@vx/text\";\nimport { useState } from \"react/cjs/react.production.min\";\n\nconst Bar = ({ color, x, y, width, height, name, value }) => {\n  function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n  const text = `${name} ${numberWithCommas(value)}`;\n  const customColor = name === 'Bangladesh 🇧🇩' && '#483D8B'\n    || name === 'Brazil 🇧🇷' && '#DAA520'\n    || name === 'China 🇨🇳' && '#483D8B'\n    || name === 'France 🇫🇷' && '#9370DB'\n    || name === 'Germany 🇩🇪' && '#9370DB'\n    || name === 'India 🇮🇳' && '#483D8B'\n    || name === 'Indonesia 🇮🇩' && '#483D8B'\n    || name === 'Italy 🇮🇹' && '#9370DB'\n    || name === 'Japan 🇯🇵' && '#483D8B'\n    || name === 'Russia 🇷🇺' && '#9370DB'\n    || name === 'United Kingdom 🇬🇧' && '#9370DB'\n    || name === 'United States 🇺🇸' && '#9370DB'\n  \n  return (\n    <React.Fragment>\n      <VxBar\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        fill={customColor}\n        style={{ opacity: 0.8 }}\n      />\n      <VxText x={x + 10} y={y + height / 2}>\n        {text}\n      </VxText>\n    </React.Fragment>\n  );\n};\n\nexport default Bar;\n","import React, { forwardRef } from \"react\";\nimport { useTransition, animated } from \"react-spring\";\nimport Bar from \"./Bar\";\n\nconst AnimatedBar = animated(Bar);\n\nconst RacingBarGroup = forwardRef(({ frameData, xScale, yScale, colorScale }, ref) => {\n  const transitions = useTransition(\n    frameData.map(({ name, value }, idx) => ({\n      y: yScale(idx),\n      width: xScale(value),\n      value,\n      name\n    })),\n    d => d.name,\n    {\n      initial: d => d,\n      from: { y: yScale.range()[1] + 50, width: 0, value: 0 },\n      leave: { y: yScale.range()[1] + 50, width: 0, value: 0 },\n      enter: d => d,\n      update: d => d,\n      unique: true,\n      ref,\n    }\n  );\n\n  return transitions.map(({ item, props }) => {\n    const { y, value, width } = props;\n    const { name } = item;\n    return (\n      <AnimatedBar\n        x={xScale(0)}\n        y={y}\n        width={width}\n        height={yScale.bandwidth()}\n        color={colorScale(name)}\n        value={value.interpolate(v => v.toFixed())}\n        name={name}\n        key={name}\n      />\n    );\n  });\n});\n\nexport default RacingBarGroup;\n","export const dataCountry = [{\n    name: 'Bangladesh 🇧🇩',\n    continent: 'Asia'\n    },\n    {\n    name: 'Brazil 🇧🇷',\n    continent: 'Americas'\n    },\n    {\n    name: 'China 🇨🇳',\n    continent: 'Asia'\n    },\n    {\n    name: 'France 🇫🇷',\n    continent: 'Europe'\n    },\n    {\n    name: 'Germany 🇩🇪',\n    continent: 'Europe'\n    },\n    {\n    name: 'India 🇮🇳',\n    continent: 'Asia'\n    },\n    {\n    name: 'Indonesia 🇮🇩',\n    continent: 'Asia'\n    },\n    {\n    name: 'Italy 🇮🇹',\n    continent: 'Europe'\n    },\n    {\n    name: 'Japan 🇯🇵',\n    continent: 'Asia'\n    },\n    {\n    name: 'Russia 🇷🇺',\n    continent: 'Europe'\n    },\n    {\n    name: 'United Kingdom 🇬🇧',\n    continent: 'Europe'\n    },\n    {\n    name: 'United States 🇺🇸',\n    continent: 'Europe'\n    }\n]\n\nexport const dataContinent = [{id: 1, name: 'Asia', color: '#483D8B', active: true }, {id: 2, name: 'Europe', color: '#9370DB', active: true }, {id: 3, name: 'Africa', color: '#DB7093', active: true }, {id: 4, name: 'Oceania', color: '#FFA500', active: true }, {id: 5, name: 'Americas', color: '#DAA520', active: true }]\n","import React, { useEffect, useImperativeHandle, useMemo, useRef, useState, useLayoutEffect } from \"react\";\nimport { schemeTableau10 } from \"d3-scale-chromatic\";\nimport { scaleLinear, scaleBand, scaleOrdinal } from \"@vx/scale\";\nimport { Group } from \"@vx/group\";\nimport RacingAxisTop from \"./RacingAxisTop\";\nimport RacingBarGroup from \"./RacingBarGroup\";\nimport Checkbox from '@mui/material/Checkbox';\nimport Stack from '@mui/material/Stack';\nimport { dataContinent } from \"./util/dataCountry\";\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\nconst RacingBarChart = React.forwardRef(({\n  numOfBars,\n  width,\n  height,\n  margin,\n  keyframes,\n  onStart,\n  onStop,\n}, ref) => {\n  const [{ frameIdx, animationKey, playing }, setAnimation] = useState({\n    frameIdx: 0,\n    animationKey: 0,\n    playing: false,\n  });\n  const [dataRegion, setDataRegio] = useState([])\n  const [regionContinent, setRegionContinent] = useState(dataContinent)\n  const updateFrameRef = useRef();\n  // when replay, increment the key to rerender the chart.\n  useEffect(() => {\n    if (!updateFrameRef.current) {\n      const { date: currentDate, data: frameData } = frame;\n      setDataRegio(frameData.slice(0, numOfBars))\n      updateFrameRef.current = setTimeout(() => {\n        setAnimation(({ frameIdx: prevFrameIdx, playing, ...others }) => {\n          const isLastFrame = prevFrameIdx === keyframes.length - 1;\n          const nextFrameIdx = isLastFrame ? prevFrameIdx : prevFrameIdx + 1;\n          return {\n            ...others,\n            frameIdx: playing ? nextFrameIdx : prevFrameIdx,\n            playing: !!(playing && !isLastFrame),\n          }\n        });\n        updateFrameRef.current = null;\n      }, 250);\n    }\n  });\n  const barGroupRef = useRef();\n  const axisRef = useRef();\n  useImperativeHandle(ref, () => ({\n    replay: () => {\n      clearTimeout(updateFrameRef.current);\n      updateFrameRef.current = null;\n      setAnimation(({ animationKey, ...others }) => ({\n        ...others,\n        frameIdx: 0,\n        animationKey: animationKey + 1,\n        playing: true,\n      }));\n    },\n    start: () => {\n      setAnimation(animation => ({\n        ...animation,\n        playing: true,\n      }));\n    },\n    stop: () => {\n      setAnimation(animation => ({\n        ...animation,\n        playing: false,\n      }));\n      barGroupRef.current.stop();\n      axisRef.current.stop();\n    },\n    playing,\n  }));\n  const prevPlayingRef = useRef(playing);\n  useEffect(() => {\n    if (prevPlayingRef.current !== playing) {\n      if (playing) {\n        onStart();\n      } else {\n        onStop();\n      }\n    }\n    prevPlayingRef.current = playing;\n  }, [playing]);\n  useLayoutEffect(() => {\n    if (barGroupRef.current) {\n      if (playing) {\n        barGroupRef.current.start();\n        axisRef.current.start();\n      }\n    }\n  });\n  const frame = keyframes[frameIdx];\n  const { date: currentDate, data: frameData } = frame;\n  const sumTotalValues = frameData.reduce((a, b) => a + (b['value'] || 0), 0)\n  const values = frameData.map(({ value }) => value);\n  const xMax = width - margin.left - margin.right;\n  const yMax = height - margin.top - margin.bottom;\n  const domainMax = Math.max(...values);\n  const xScale = scaleLinear({\n    domain: [0, domainMax],\n    range: [0, xMax]\n  });\n  const yScale = useMemo(\n    () =>\n      scaleBand({\n        domain: Array(numOfBars)\n          .fill(0)\n          .map((_, idx) => idx),\n        range: [0, yMax]\n      }),\n    [numOfBars, yMax]\n  );\n  const nameList = useMemo(\n    () => {\n      if (keyframes.length === 0) {\n        return []\n      }\n      return keyframes[0].data.map(d => d.name);\n    },\n    [keyframes]\n  );\n  const colorScale = useMemo(\n    () =>\n      scaleOrdinal(schemeTableau10)\n        .domain(nameList)\n        .range(schemeTableau10),\n    [nameList]\n  );\n\n  const dateInYear = currentDate.getFullYear();\n\n  function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n  \n  const handleChangeCheckbox = (event, name) => {\n    console.log('event', event)\n    console.log('name', name)\n    console.log('checked', event.target.checked)\n    const filter = regionContinent.map((item) => {\n      if (item.name === name) {\n        item.active = event.target.checked\n      }\n      return item\n    })\n    setRegionContinent(filter);\n  }\n\n  console.log('dataRegion', dataRegion)\n  console.log('regionContinent', regionContinent)\n  \n  return (\n    <>\n      <Stack direction=\"row\" spacing={2} style={{ marginBottom: \"1rem\" }}>\n        <p style={{ marginTop: '0.5rem' }}>Region:</p> \n        {playing ? (       regionContinent?.map((item) => (\n             <FormControlLabel\n              label={item.name}\n              color={item.color}\n              control={<Checkbox value={item.name} checked={item.active} onChange={(event) => handleChangeCheckbox(event, item.name)}/>}\n              style={{ color: item.color }}\n              sx={{\n              color: `${item.color}`,\n              '&.Mui-checked': {\n                color: `${item.color}`,\n                border: `${item.color}`\n              },\n              }}\n            \n            />\n          \n          ))) : <p style={{ color: \"red\", marginTop: '0.5rem' }}>Please push PLAY before filter</p>\n   \n        }\n        \n    </Stack>\n  <svg width={width} height={height}>\n      <Group top={margin.top} left={margin.left} key={animationKey}>\n        <RacingBarGroup\n          frameData={dataRegion.filter((elem) => !regionContinent.find(({ name, active }) => elem.category === name && !active))}\n          xScale={xScale}\n          yScale={yScale}\n          colorScale={colorScale}\n          ref={barGroupRef}\n        />\n        <text\n          textAnchor=\"end\"\n          style={{ fontSize: \"4.25em\" }}\n          x={xMax}\n          y={500}\n        >\n          {dateInYear}\n        </text>\n         <text\n          textAnchor=\"end\"\n          style={{ fontSize: \"2.25em\" }}\n          x={xMax}\n          y={yMax}\n        >\n         Total: {numberWithCommas(sumTotalValues.toFixed())}\n        </text>\n        <line\n          x1={0}\n          y1={0}\n          x2={0}\n          y2={yMax}\n          stroke=\"black\"\n        />\n        <RacingAxisTop\n          domainMax={domainMax}\n          xMax={xMax}\n          ref={axisRef}\n        />\n      </Group>\n      </svg>\n    </>\n  );\n});\n\nRacingBarChart.defaultProps = {\n  width: 600,\n  height: 450,\n  margin: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 100\n  },\n};\n\nexport default RacingBarChart;\n","import React from \"react\";\nimport axios from \"axios\";\nimport csvParse from \"csv-parse/lib/sync\";\n\nconst buildFindData = data => {\n  const dataByDateAndName = new Map();\n  data.forEach(dataPoint => {\n    const { date, name } = dataPoint;\n    if (!dataByDateAndName.get(date)) {\n      dataByDateAndName.set(date, { [name]: dataPoint });\n    } else {\n      const nextGroup = {\n        ...dataByDateAndName.get(date),\n        [name]: dataPoint\n      };\n      dataByDateAndName.set(date, nextGroup);\n    }\n  });\n  const finder = ({ date, name }) => {\n    try {\n      return dataByDateAndName.get(date)[name];\n    } catch (e) {\n      return null;\n    }\n  };\n  return finder;\n}\n\nconst makeKeyframes = (data, numOfSlice) => {\n  /**\n   * Assume data is an array of { date: string, name: string, value: number, ...others }.\n   * This function return an array of keyframe, each keyframe is { date: Date, data: { name: string, value: number, ...others }[] }.\n   * At first we will collect all of the name appearing in the original data.\n   * The `data` field of keyframe is descending sorted by `value` field.\n   */\n  const findData = buildFindData(data);\n  const nameSet = new Set(data.map(({ name }) => name));\n  const nameList = [...nameSet];\n  const dateSet = new Set(data.map(({ date }) => date));\n  const dateList = [...dateSet];\n\n  const frames = dateList.sort().map(date => ({\n    date,\n    data: nameList.map(name => {\n      const dataPoint = findData({ date, name });\n      return {\n        ...dataPoint,\n        value: dataPoint ? dataPoint.value : 0,\n      };\n    })\n  }));\n  const keyframes = frames\n    .reduce((result, frame, idx) => {\n      const prev = frame;\n      const next = idx !== frames.length - 1 ? frames[idx + 1] : null;\n      if (!next) {\n        result.push({ ...frame, date: new Date(frame.date) });\n      } else {\n        const prevTimestamp = new Date(prev.date).getTime();\n        const nextTimestamp = new Date(next.date).getTime();\n        const diff = nextTimestamp - prevTimestamp;\n        for (let i = 0; i < numOfSlice; i++) {\n          const sliceDate = new Date(prevTimestamp + diff * i / numOfSlice);\n          const sliceData = frame.data.map(({ name, value, ...others }) => {\n            const prevValue = value;\n            const nextDataPoint = findData({ date: next.date, name });\n            const nextValue = nextDataPoint ? nextDataPoint.value : 0;\n            const sliceValue =\n              prevValue + (nextValue - prevValue) * i / numOfSlice;\n            return {\n              name,\n              value: sliceValue,\n              ...others\n            };\n          });\n          result.push({\n            date: sliceDate,\n            data: sliceData\n          });\n        }\n      }\n      return result;\n    }, [])\n    .map(({ date, data }) => {\n      return {\n        date,\n        data: data.sort((a, b) => b.value - a.value)\n      };\n    });\n  return keyframes;\n};\n\nfunction useKeyframes(dataUrl, numOfSlice) {\n  const [keyframes, setKeyframes] = React.useState([]);\n  React.useEffect(() => {\n    axios.get(dataUrl).then(resp => {\n      const { data: csvString } = resp;\n      const nextData = csvParse(csvString)\n        .slice(1)\n        .map(([date, name, category, value]) => ({\n          date,\n          name,\n          category,\n          value: Number(value)\n        }));\n      const keyframes = makeKeyframes(nextData, numOfSlice);\n      setKeyframes(keyframes);\n    });\n  }, [dataUrl, numOfSlice]);\n  return keyframes;\n}\n\nexport default useKeyframes;","import React, { useState } from \"react\";\nimport RacingBarChart from \"./RacingBarChart\";\nimport useKeyframes from \"./useKeyframes\";\nimport useWindowSize from \"./useWindowSize\";\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport ReplayCircleFilledIcon from '@mui/icons-material/ReplayCircleFilled';\nimport PlayCircleFilledIcon from '@mui/icons-material/PlayCircleFilled';\nimport StopCircleIcon from '@mui/icons-material/StopCircle';\nconst dataUrl = \"/data/category-brands.csv\";\nconst numOfBars = 12;\nconst numOfSlice = 10;\nconst chartMargin = {\n  top: 30,\n  right: 10,\n  bottom: 30,\n  left: 10,\n};\n\nfunction App() {\n  const { width: windowWidth } = useWindowSize();\n  const chartWidth = windowWidth - 64;\n  const chartHeight = 600;\n  const keyframes = useKeyframes(dataUrl, numOfSlice);\n  const chartRef = React.useRef();\n  const handleReplay = () => {\n    chartRef.current.replay();\n  }\n  const handleStart = () => {\n    chartRef.current.start();\n  }\n  const handleStop = () => {\n    chartRef.current.stop();\n  }\n  const playing = chartRef.current ? chartRef.current.playing : false;\n  const [_, forceUpdate] = useState();\n  console.log('keyframes', keyframes)\n  return (\n    <div style={{ margin: \"0 2em\" }}>\n            <h1>Population growth per country 1950 to 2021</h1>\n      \n      <div style={{ paddingTop: \"1em\" , marginBottom: \"1rem\"}}>\n        <Stack direction=\"row\" spacing={2} style={{marginBottom: \"1rem\"}}>\n          <Button variant=\"outlined\" onClick={handleReplay} endIcon={<ReplayCircleFilledIcon />}>\n            Try again\n          </Button>\n          <Button variant=\"contained\" onClick={playing ? handleStop : handleStart}\n            endIcon={playing ? <PlayCircleFilledIcon /> : <StopCircleIcon />}\n            color={!playing? \"success\":\"error\"}\n          >\n                { playing ? 'Pause' : 'Play' }\n          </Button>\n        </Stack>\n        {keyframes.length > 0 && (\n          <RacingBarChart\n            keyframes={keyframes}\n            numOfBars={numOfBars}\n            width={chartWidth}\n            height={chartHeight}\n            margin={chartMargin}\n            onStart={() => forceUpdate(true)}\n            onStop={() => forceUpdate(false)}\n            ref={chartRef}\n          />\n        )}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nexport default function useWindowSize() {\n  const getSize = () => ({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n  const [windowSize, setWindowSize] = React.useState(getSize);\n  React.useEffect(() => {\n    const onResize = () => {\n      setWindowSize(getSize);\n    };\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n  return windowSize\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}